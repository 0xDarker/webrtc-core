{"version":3,"file":"bundle.min.js","sources":["../dist/track.js","../dist/localTrack.js","../dist/LocalAudioTrack.js","../dist/localVideoTrack.js","../dist/deviceItem.js","../dist/devices.js","../dist/microphoneAudioTrack.js","../dist/media.js","../dist/remoteTrack.js","../dist/index.js","../dist/peerConnectionManager.js","../dist/cameravideotrack.js","../dist/peerconnection.js","../dist/remoteAudioTrack.js","../dist/remoteVideoTrack.js"],"sourcesContent":["export class Track {\n    trackMediaType;\n    constructor(trackMediaType) {\n        this.trackMediaType = trackMediaType;\n    }\n    getListeners() {\n    }\n    getMediaStreamTrack() {\n    }\n    getTrackID() { }\n    play() {\n    }\n    stop() {\n    }\n}\n//# sourceMappingURL=track.js.map","import { Track } from \"./track\";\nexport class LocalTrack extends Track {\n    close() {\n    }\n    setEnabled() {\n    }\n    getTrackLabel() {\n    }\n}\n//# sourceMappingURL=localTrack.js.map","import { LocalTrack } from \"./localTrack\";\nexport class LocalAudioTrack extends LocalTrack {\n    getVolumeLevel() {\n    }\n    setAudioFrameCallback() {\n    }\n    setPlaybackDevice() {\n    }\n    setVolume() {\n    }\n}\n//# sourceMappingURL=LocalAudioTrack.js.map","import { LocalTrack } from \"./localTrack\";\nexport class LocalVideoTrack extends LocalTrack {\n    getCurrentFrameData() {\n    }\n    setOptimizationMode() {\n    }\n}\n//# sourceMappingURL=localVideoTrack.js.map","var DeviceState;\n(function (DeviceState) {\n    DeviceState[DeviceState[\"ACTIVE\"] = 1] = \"ACTIVE\";\n    DeviceState[DeviceState[\"INACTIVE\"] = 0] = \"INACTIVE\";\n})(DeviceState || (DeviceState = {}));\nexport default class DeviceItem {\n    device;\n    state;\n    addedTime;\n    updatedTime;\n    constructor(device) {\n        this.device = device;\n        this.state = DeviceState.INACTIVE;\n        this.addedTime = Date.now().toLocaleString();\n        this.updatedTime = Date.now().toLocaleString();\n    }\n}\n//# sourceMappingURL=deviceItem.js.map","import DeviceItem from \"./deviceItem\";\nexport class Devices {\n    devices = {};\n    getDevices() {\n        return navigator.mediaDevices.enumerateDevices()\n            .then((devicesList) => {\n            devicesList.forEach((device) => {\n                this.devices[device.deviceId] = new DeviceItem(device);\n            });\n            return devicesList;\n        });\n    }\n}\n//# sourceMappingURL=devices.js.map","import { LocalAudioTrack } from \"./LocalAudioTrack\";\nexport default class MicroPhoneAudioTrack extends LocalAudioTrack {\n    setDevice(deviceId) {\n    }\n}\n//# sourceMappingURL=microphoneAudioTrack.js.map","import { Devices } from \"./devices\";\nimport MicrophoneAudioTrack from \"./microphoneAudioTrack\";\nexport default class Media {\n    static instance;\n    devices;\n    constructor() {\n        this.devices = new Devices();\n    }\n    createAudioTrack(audioTrackConfig) {\n        return Promise.resolve(new MicrophoneAudioTrack('audio'));\n    }\n    createVideoTrack(cameraVideoTrackConfig) {\n        return navigator.mediaDevices.getUserMedia({\n            video: {\n                width: { min: 640, ideal: 1920 },\n                height: { min: 400, ideal: 1080 },\n                aspectRatio: { ideal: 1.7777777778 }\n            },\n            audio: {\n                sampleSize: 16,\n                channelCount: 2\n            }\n        }).then(stream => {\n            return stream;\n        }).catch(Error);\n    }\n    createAudioVideoTrack() {\n    }\n    createScreenTrack() {\n    }\n    getCameraDevices() {\n    }\n    getDevices() {\n        return this.devices.getDevices();\n    }\n    getMicrophoneDevices() {\n    }\n    getPlaybackDevices() {\n    }\n    isAudioTrackActive(remoteAudioTrack, timout) {\n    }\n    static getInstance() {\n        if (!Media.instance) {\n            Media.instance = new Media();\n        }\n        return Media.instance;\n    }\n}\n//# sourceMappingURL=media.js.map","import { Track } from \"./track\";\nexport class RemoteTrack extends Track {\n    getUserId() {\n    }\n}\n//# sourceMappingURL=remoteTrack.js.map","import { LocalAudioTrack } from \"./LocalAudioTrack\";\nimport { LocalVideoTrack } from \"./localVideoTrack\";\nimport { default as Media } from \"./media\";\nimport MicroPhoneAudioTrack from \"./microphoneAudioTrack\";\nimport { default as PeerConnection } from \"./peerconnection\";\nimport { RemoteAudioTrack } from \"./remoteAudioTrack\";\nimport { Track } from \"./track\";\nimport { LocalTrack } from \"./localTrack\";\nimport { RemoteVideoTrack } from \"./remoteVideoTrack\";\nimport { RemoteTrack } from './remoteTrack';\nimport { CameraVideoTrack } from './cameravideotrack';\nimport PeerConnectionManager from \"./peerConnectionManager\";\nconst WebRtcCore = {\n    media: new Media(),\n    peerConnectionManager: new PeerConnectionManager({ logLevel: 0, iceServer: ['server1'], simulcast: true, noOfTracksReceived: 3, maxBitrate: 20000, frameRate: 30, frameSize: 3869 })\n};\nwindow.WebRtcCore = WebRtcCore || {};\nexport default WebRtcCore;\nexport { Media, PeerConnection, LocalVideoTrack, LocalAudioTrack, LocalTrack, MicroPhoneAudioTrack, RemoteAudioTrack, RemoteVideoTrack, RemoteTrack, Track, CameraVideoTrack };\n//# sourceMappingURL=index.js.map","export default class PeerConnectionManager {\n    constructor(config) {\n    }\n}\n//# sourceMappingURL=peerConnectionManager.js.map","import { LocalVideoTrack } from \"./localVideoTrack\";\nexport class CameraVideoTrack extends LocalVideoTrack {\n    setEncoderConfiguration() {\n    }\n}\n//# sourceMappingURL=cameravideotrack.js.map","export default class PeerConnection {\n    sdpRevision = 0;\n    iceConnectionState = \"INIT\";\n    iceGatheringState = \"INIT\";\n    constructor(peerConnectionConfig) {\n    }\n    addTransceiver(track, mid) { }\n    updateTransceiver(peerConnection, transceiver, track) { }\n    setRemoteDescription(remoteDescription) { }\n    createOffer(offerSdp) { }\n    createAnswer(answerSdp) { }\n    _handleGlare() {\n    }\n    close() { }\n    _recycleTransciver() { }\n    initiateIceRestart() { }\n    restartDtls() { }\n}\n//# sourceMappingURL=peerconnection.js.map","import { RemoteTrack } from \"./remoteTrack\";\nexport class RemoteAudioTrack extends RemoteTrack {\n    getVolumeLevel() {\n    }\n    setAudioFrameCallback() {\n    }\n    setPlaybackDevice() {\n    }\n    setVolume() {\n    }\n}\n//# sourceMappingURL=remoteAudioTrack.js.map","import { RemoteTrack } from \"./remoteTrack\";\nexport class RemoteVideoTrack extends RemoteTrack {\n    getCurrentFrameData() {\n    }\n}\n//# sourceMappingURL=remoteVideoTrack.js.map"],"names":["Track","trackMediaType","constructor","this","getListeners","getMediaStreamTrack","getTrackID","play","stop","LocalTrack","close","setEnabled","getTrackLabel","LocalAudioTrack","getVolumeLevel","setAudioFrameCallback","setPlaybackDevice","setVolume","LocalVideoTrack","getCurrentFrameData","setOptimizationMode","DeviceState","DeviceItem","device","state","addedTime","updatedTime","INACTIVE","Date","now","toLocaleString","Devices","devices","getDevices","navigator","mediaDevices","enumerateDevices","then","devicesList","forEach","deviceId","MicroPhoneAudioTrack","setDevice","Media","instance","createAudioTrack","audioTrackConfig","Promise","resolve","MicrophoneAudioTrack","createVideoTrack","cameraVideoTrackConfig","getUserMedia","video","width","min","ideal","height","aspectRatio","audio","sampleSize","channelCount","stream","catch","Error","createAudioVideoTrack","createScreenTrack","getCameraDevices","getMicrophoneDevices","getPlaybackDevices","isAudioTrackActive","remoteAudioTrack","timout","getInstance","RemoteTrack","getUserId","WebRtcCore","media","peerConnectionManager","config","logLevel","iceServer","simulcast","noOfTracksReceived","maxBitrate","frameRate","frameSize","window","setEncoderConfiguration","sdpRevision","iceConnectionState","iceGatheringState","peerConnectionConfig","addTransceiver","track","mid","updateTransceiver","peerConnection","transceiver","setRemoteDescription","remoteDescription","createOffer","offerSdp","createAnswer","answerSdp","_handleGlare","_recycleTransciver","initiateIceRestart","restartDtls"],"mappings":"6OAAO,MAAMA,EACTC,eACAC,YAAYD,GACRE,KAAKF,eAAiBA,EAE1BG,gBAEAC,uBAEAC,cACAC,QAEAC,SCXG,MAAMC,UAAmBT,EAC5BU,SAEAC,cAEAC,kBCLG,MAAMC,UAAwBJ,EACjCK,kBAEAC,yBAEAC,qBAEAC,cCPG,MAAMC,UAAwBT,EACjCU,uBAEAC,wBCJJ,IAAIC,GACJ,SAAWA,GACPA,EAAYA,EAAoB,OAAI,GAAK,SACzCA,EAAYA,EAAsB,SAAI,GAAK,WAF/C,CAGGA,IAAgBA,EAAc,KAClB,MAAMC,EACjBC,OACAC,MACAC,UACAC,YACAxB,YAAYqB,GACRpB,KAAKoB,OAASA,EACdpB,KAAKqB,MAAQH,EAAYM,SACzBxB,KAAKsB,UAAYG,KAAKC,MAAMC,iBAC5B3B,KAAKuB,YAAcE,KAAKC,MAAMC,kBCb/B,MAAMC,EACTC,QAAU,GACVC,aACI,OAAOC,UAAUC,aAAaC,mBACzBC,MAAMC,IACPA,EAAYC,SAAShB,IACjBpB,KAAK6B,QAAQT,EAAOiB,UAAY,IAAIlB,EAAWC,MAE5Ce,MCRJ,MAAMG,UAA6B5B,EAC9C6B,UAAUF,KCAC,MAAMG,EACjBC,gBACAZ,QACA9B,cACIC,KAAK6B,QAAU,IAAID,EAEvBc,iBAAiBC,GACb,OAAOC,QAAQC,QAAQ,IAAIC,EAAqB,UAEpDC,iBAAiBC,GACb,OAAOjB,UAAUC,aAAaiB,aAAa,CACvCC,MAAO,CACHC,MAAO,CAAEC,IAAK,IAAKC,MAAO,MAC1BC,OAAQ,CAAEF,IAAK,IAAKC,MAAO,MAC3BE,YAAa,CAAEF,MAAO,eAE1BG,MAAO,CACHC,WAAY,GACZC,aAAc,KAEnBxB,MAAKyB,GACGA,IACRC,MAAMC,OAEbC,yBAEAC,qBAEAC,oBAEAlC,aACI,OAAO9B,KAAK6B,QAAQC,aAExBmC,wBAEAC,sBAEAC,mBAAmBC,EAAkBC,IAErCC,qBAII,OAHK9B,EAAMC,WACPD,EAAMC,SAAW,IAAID,GAElBA,EAAMC,UC5Cd,MAAM8B,UAAoB1E,EAC7B2E,oBCUEC,EAAa,CACfC,MAAO,IAAIlC,EACXmC,sBAAuB,ICdZ,MACX5E,YAAY6E,MDaqC,CAAEC,SAAU,EAAGC,UAAW,CAAC,WAAYC,WAAW,EAAMC,mBAAoB,EAAGC,WAAY,IAAOC,UAAW,GAAIC,UAAW,QAEjLC,OAAOX,WAAaA,GAAc,sBEf3B,cAA+B1D,EAClCsE,wICFW,MACXC,YAAc,EACdC,mBAAqB,OACrBC,kBAAoB,OACpBzF,YAAY0F,IAEZC,eAAeC,EAAOC,IACtBC,kBAAkBC,EAAgBC,EAAaJ,IAC/CK,qBAAqBC,IACrBC,YAAYC,IACZC,aAAaC,IACbC,gBAEA/F,SACAgG,sBACAC,sBACAC,oCCfG,cAA+BlC,EAClC5D,kBAEAC,yBAEAC,qBAEAC,kDCPG,cAA+ByD,EAClCvD"}